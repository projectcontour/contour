name: Build and push a release

on:
  push:
    tags:
      # Although these *look* like regex matches, they're not!
      # They are Go path.Match() expressions.
      # See https://golang.org/pkg/path/#Match for details.
      - 'v[0-9]*.[0-9]*.[0-9]'
      - 'v[0-9]*.[0-9]*.[0-9][0-9]'
      - 'v[0-9]*.[0-9]*.[0-9][0-9][0-9]'
      - 'v[0-9]*.[0-9]*.[0-9]*beta*'
      - 'v[0-9]*.[0-9]*.[0-9]*alpha*'
      - 'v[0-9]*.[0-9]*.[0-9]*rc*'
env:
  GOPROXY: https://proxy.golang.org/
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GO_VERSION: 1.21.3
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: latest
    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push to GHCR
      env:
        REGISTRY: ghcr.io/${{ github.repository_owner }}
        TAG_LATEST: "false"
      run: |
        ./hack/actions/build-and-push-release-images.sh
    - uses: act10ns/slack@v2
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#contour-ci-notifications'
      if: failure()
  gateway-conformance-report:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ github.job }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-go-
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: add deps to path
        run: |
          ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: Gateway API conformance tests
        env:
          GENERATE_GATEWAY_CONFORMANCE_REPORT: "true"
        run: |
          export CONTOUR_E2E_IMAGE="ghcr.io/projectcontour/contour:$(git describe --tags)"
          make setup-kind-cluster run-gateway-conformance cleanup-kind
      - name: Upload gateway conformance report
        uses: actions/upload-artifact@v3
        with:
          name: gateway-conformance-report
          path: gateway-conformance-report/projectcontour-contour-*.yaml
      - uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#contour-ci-notifications'
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
