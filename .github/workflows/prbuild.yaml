name: Build and Test Pull Request

# Trigger the workflow on push or pull request
on: [push, pull_request]

env:
  GOPROXY: https://proxy.golang.org/
jobs:
  integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # use stable kubernetes_version values since they're included
        # in the name of the GitHub Actions job, and we don't want to
        # have to update branch protection rules every time we change
        # a Kubernetes version number.
        kubernetes_version: ["kubernetes:latest", "kubernetes:n-1", "kubernetes:n-2"]
        # include defines an additional variable (the specific node
        # image to use) for each kubernetes_version value.
        include:
          - kubernetes_version: "kubernetes:latest"
            node_image: "docker.io/kindest/node:v1.20.7@sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9"
          - kubernetes_version: "kubernetes:n-1"
            node_image: "docker.io/kindest/node:v1.19.11@sha256:07db187ae84b4b7de440a73886f008cf903fcf5764ba8106a9fd5243d6f32729"
          - kubernetes_version: "kubernetes:n-2"
            node_image: "docker.io/kindest/node:v1.18.19@sha256:7af1492e19b3192a79f606e43c35fb741e520d195f96399284515f077b3b622c"
    steps:
      - uses: actions/checkout@v2
      - name: add deps to path
        run: |
          ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: integration tests
        env:
          NODEIMAGE: ${{ matrix.node_image }}
        run: |
          make integration
  # TODO: re-enable once Ingress v1 support is complete
  # ingress-conformance:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: add deps to path
  #       run: |
  #         ./hack/actions/install-kubernetes-toolchain.sh $GITHUB_WORKSPACE/bin
  #         echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
  #     - name: ingress conformance tests
  #       run: |
  #         make check-ingress-conformance
  test-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.2'
      - name: test
        run: |
          make install
          make check-coverage
      - name: codeCoverage
        if: ${{ success() }}
        run: |
          CODECOV_NAME=coverage.out bash <(curl -s https://codecov.io/bash)
  test-osx:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.2'
      - name: test
        run: |
          make install
          make check-coverage
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.38
  codespell:
    name: Codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Codespell
        uses: codespell-project/actions-codespell@master
        with:
          skip: .git,*.png,*.woff,*.ttf,*.jpg,*.ico,./site/Gemfile.lock,./site/_config.yml
          ignore_words_file: './.codespell.ignorewords'
          check_filenames: true
          check_hidden: true
  codegen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.2'
      - name: generate
        run: |
          make generate lint-yamllint lint-flags
          ./hack/actions/check-uncommitted-codegen.sh
